@model TECHNICAL_ASSESSMENT.Models.Entity.Appointment
@{
    ViewBag.Title = "CreateAppointment";
}
<div id="patientPage">
    <h2>Safety Instruction for Patients from Doctor</h2>
    <p>
        <b>Objective.</b> To describe patient safety instruction in health professional curricula, including medicine, nursing, pharmacy, and dentistry.
        <br />
        <b>Methods.</b> A systematic review of the literature from 1966 through 2010 was conducted using 6 databases and based on 3 search
        criteria: safety management, patient safety, and curriculum.
        <br />
        <b>Results.</b> One hundred fifty-four articles were identified and 23 met inclusion criteria.
        A variety of educational methods have been used in health profession curricula to promote
        patient safety including lectures, workshops, objective structured clinical examinations, standardized patients, simulation exercises,
        root cause analysis, quality assurance projects, and other interactive learning methods.
        The development of patient safety curricula has been primarily discipline-specific, with little interdisciplinary research found.
        <br />
        <b>Conclusions.</b> Safe, patient-centered care is directly influenced by the quality of education that healthcare professions students receive.
        From this literature review, research is needed to guide curricular change, specifically focusing on instructional methods and interdisciplinary collaborations.
        <br /><b>if you want to creat appointment <label style="color:blue" id="viewForm" onclick="createAppointment()">click here</label></b>
    </p>
    
</div>

<div id="createApt" style="display:none">
    <h2>CreateAppointment</h2>

    @using (Html.BeginForm("AddAppointment", "Dashboard", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

<div class="form-horizontal">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.DoctorName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.DoctorName, ViewBag.Doctors as SelectList, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DoctorName, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
        </div>
    </div>*@

    <div class="form-group">
        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", Type = "datetime-local" } })
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
    }
</div>
<script>
    function createAppointment() {
        document.getElementById("createApt").style.display = 'block';
        document.getElementById("patientPage").style.display = 'none';
    }
    function wrap() {
        document.getElementById("patientPage").style.display = 'block';
        document.getElementById("createApt").style.display = 'none';
    }
</script>
